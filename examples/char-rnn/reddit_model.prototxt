name: "char-rnn_language_model"
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont"
  top: "input"
  top: "target"
  include { phase: TRAIN }
  hdf5_data_param {
    source: "./examples/char-rnn/data/train_reddit.txt"
    batch_size: 100
  }
}
#layer {
#  name: "data"
#  type: "HDF5Data"
#  top: "cont"
#  top: "input"
#  top: "target"
#  include {
#    phase: TEST
#    stage: "test-on-train"
#  }
#  hdf5_data_param {
#    source: "./examples/char-rnn/data/train_reddit.txt"
#    batch_size: 20
#  }
#}
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont"
  top: "input"
  top: "target"
  include {
    phase: TEST
    stage: "test-on-val"
  }
  hdf5_data_param {
    source: "./examples/char-rnn/data/val_reddit.txt"
    batch_size: 20
  }
}
layer {
  name: "embedding"
  type: "Embed"
  bottom: "input"
  top: "embedded_input"
  param {
    lr_mult: 1
  }
  embed_param {
    bias_term: false
    input_dim: 657  # = vocab_size + 1 (for EOS)
    num_output: 256
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "embed-drop"
  type: "Dropout"
  bottom: "embedded_input"
  top: "embedded_input"
  dropout_param { dropout_ratio: 0.5 }
  include { stage: "embed-drop" }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input"
  bottom: "cont"
  top: "lstm1"
  recurrent_param {
    num_output: 256
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm2"
  type: "LSTM"
  bottom: "lstm1"
  bottom: "cont"
  top: "lstm2"
  recurrent_param {
    num_output: 256
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lstm2"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 657  # = vocab_size + 1 (+1 for EOS)
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "target"
  top: "cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "predict"
  bottom: "target"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    ignore_label: -1
  }
}
